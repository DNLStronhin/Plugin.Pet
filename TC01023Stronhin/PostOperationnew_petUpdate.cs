
// <copyright file="PostOperationnew_petUpdate.cs" company="">
// Copyright (c) 2024 All Rights Reserved
// </copyright>
// <author></author>
// <date>6/24/2024 11:55:57 AM</date>
// <summary>Implements the PostOperationnew_petUpdate Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
// </auto-generated>

using System;
using System.Collections.Generic;
using System.ServiceModel;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Query;

namespace PPST.TC01023Stronhin
{

    /// <summary>
    /// PostOperationnew_petUpdate Plugin.
    /// Fires when the following attributes are updated:
    /// statecode
    /// </summary>    
    public class PostOperationnew_petUpdate: PluginBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostOperationnew_petUpdate"/> class.
        /// </summary>
        /// <param name="unsecure">Contains public (unsecured) configuration information.</param>
        /// <param name="secure">Contains non-public (secured) configuration information.</param>
        public PostOperationnew_petUpdate(string unsecure, string secure)
            : base(typeof(PostOperationnew_petUpdate))
        {
            
           // TODO: Implement your custom configuration handling.
        }


        /// <summary>
        /// Main entry point for he business logic that the plug-in is to execute.
        /// </summary>
        /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
        /// <see cref="IPluginExecutionContext"/>,
        /// <see cref="IOrganizationService"/>
        /// and <see cref="ITracingService"/>
        /// </param>
        /// <remarks>
        /// </remarks>
        protected override void ExecuteCdsPlugin(ILocalPluginContext localContext)
        {
            if (localContext == null)
            {
                throw new InvalidPluginExecutionException(nameof(localContext));
            }           
            // Obtain the tracing service
            ITracingService tracingService = localContext.TracingService;

            try
            { 
                // Obtain the execution context from the service provider.  
                IPluginExecutionContext context = (IPluginExecutionContext)localContext.PluginExecutionContext;

                // Obtain the organization service reference for web service calls.  
                IOrganizationService currentUserService = localContext.CurrentUserService;

                var pet = context.InputParameters["Target"] as Entity;
                QueryExpression userQuery = new QueryExpression("teammembership");
                userQuery.Criteria.AddCondition("teamid", ConditionOperator.Equal, "fddf999d-c128-ef11-840a-002248c82767");
                userQuery.ColumnSet = new ColumnSet(true);
                var entities = currentUserService.RetrieveMultiple(userQuery);
                List<Guid> userIds = new List<Guid>();
                ExecuteMultipleRequest requestWithResults = new ExecuteMultipleRequest()
                {
                    Settings = new ExecuteMultipleSettings()
                    {
                        ContinueOnError = true,
                        ReturnResponses = true
                    },
                    Requests = new OrganizationRequestCollection()
                };
                foreach (var entity in entities.Entities)
                {
                    if (pet.GetAttributeValue<OptionSetValue>("statecode").Value == 1)
                    {
                        var requestAddUser = new AddUserToRecordTeamRequest();
                        requestAddUser.SystemUserId = entity.GetAttributeValue<Guid>("systemuserid");
                        requestAddUser.Record = pet.ToEntityReference();
                        requestAddUser.TeamTemplateId = new Guid("8a6e2b70-0532-ef11-8e4e-6045bd0d3e34");
                        requestWithResults.Requests.Add(requestAddUser);
                    }
                    else
                    {
                        RemoveUserFromRecordTeamRequest requestRemoveUser = new RemoveUserFromRecordTeamRequest();
                        requestRemoveUser.SystemUserId = entity.GetAttributeValue<Guid>("systemuserid");
                        requestRemoveUser.Record = pet.ToEntityReference();//new EntityReference("new_pet", pet.Id);
                        requestRemoveUser.TeamTemplateId = new Guid("8a6e2b70-0532-ef11-8e4e-6045bd0d3e34");
                        requestWithResults.Requests.Add(requestRemoveUser);
                    }
                }
                var result = currentUserService.Execute(requestWithResults);

            }	
            // Only throw an InvalidPluginExecutionException. Please Refer https://go.microsoft.com/fwlink/?linkid=2153829.
            catch (Exception ex)
            {
                tracingService?.Trace("An error occurred executing Plugin PPST.TC01023Stronhin.PostOperationnew_petUpdate : {0}", ex.ToString());
                throw new InvalidPluginExecutionException("An error occurred executing Plugin PPST.TC01023Stronhin.PostOperationnew_petUpdate .", ex);
            }	
        }
    }
}
